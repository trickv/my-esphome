esphome:
  name: bare-conductive

esp8266:
  board: d1_mini

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:
  platform: esphome
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "bare-conductive Fallback Hotspot"
    password: !secret wifi_fallback_hotspot_password

captive_portal:

sensor:
  - platform: uptime
    name: Uptime
  - platform: template
    id: bare_conductive_active_pin
    name: "Active Bare Conductive Pin"
    accuracy_decimals: 0

text_sensor:
  - platform: template
    name: "UART Received Data"
    id: uart_received_data

binary_sensor:
      # Binary sensor that turns on if any pin is touched
    - platform: template
      id: bare_conductive_any_touch
      name: "Any Bare Conductive Touch"
    - platform: template
      name: E0 Touch
      publish_initial_state: true
      id: bare_conductive_e0

    - platform: template
      name: E1 Touch
      publish_initial_state: true
      id: bare_conductive_e1

    - platform: template
      name: E2 Touch
      publish_initial_state: true
      id: bare_conductive_e2

    - platform: template
      name: E3 Touch
      publish_initial_state: true
      id: bare_conductive_e3

    - platform: template
      name: E4 Touch
      publish_initial_state: true
      id: bare_conductive_e4

    - platform: template
      name: E5 Touch
      publish_initial_state: true
      id: bare_conductive_e5

    - platform: template
      name: E6 Touch
      publish_initial_state: true
      id: bare_conductive_e6

    - platform: template
      name: E7 Touch
      publish_initial_state: true
      id: bare_conductive_e7

    - platform: template
      name: E8 Touch
      publish_initial_state: true
      id: bare_conductive_e8

    - platform: template
      name: E9 Touch
      publish_initial_state: true
      id: bare_conductive_e9
    
    - platform: template
      name: E10 Touch
      publish_initial_state: true
      id: bare_conductive_e10

    - platform: template
      name: E11 Touch
      publish_initial_state: true
      id: bare_conductive_e11


uart:
    baud_rate: 115200
    tx_pin: GPIO1
    rx_pin: GPIO3
    debug:
      direction: RX
      dummy_receiver: true
      after:
        delimiter: "\r\n"
      sequence:
        - lambda: |-
            UARTDebug::log_string(direction, bytes);
            std::string str(bytes.begin(), bytes.end());
            id(uart_received_data).publish_state(str.c_str());

            // Find the position of "pin "
            size_t pin_pos = str.find("pin ");
            if (pin_pos == std::string::npos) return;

            // Extract the pin number
            size_t num_start = pin_pos + 4;
            size_t num_end = str.find(" ", num_start);
            if (num_end == std::string::npos) return;
            
            int pin = atoi(str.substr(num_start, num_end - num_start).c_str());

            // Determine if it's a touch or release event
            bool state = str.find("was just touched") != std::string::npos;

            // Publish the state to the corresponding binary sensor
            switch (pin) {
                case 0: id(bare_conductive_e0).publish_state(state); break;
                case 1: id(bare_conductive_e1).publish_state(state); break;
                case 2: id(bare_conductive_e2).publish_state(state); break;
                case 3: id(bare_conductive_e3).publish_state(state); break;
                case 4: id(bare_conductive_e4).publish_state(state); break;
                case 5: id(bare_conductive_e5).publish_state(state); break;
                case 6: id(bare_conductive_e6).publish_state(state); break;
                case 7: id(bare_conductive_e7).publish_state(state); break;
                case 8: id(bare_conductive_e8).publish_state(state); break;
                case 9: id(bare_conductive_e9).publish_state(state); break;
                case 10: id(bare_conductive_e10).publish_state(state); break;
                case 11: id(bare_conductive_e11).publish_state(state); break;
            }

            // If a pin is being touched, update the active pin sensor
            if (state) {
                id(bare_conductive_active_pin).publish_state(pin);
            }

            // Check if any pin is still active
            bool any_active = id(bare_conductive_e0).state ||
                             id(bare_conductive_e1).state ||
                             id(bare_conductive_e2).state ||
                             id(bare_conductive_e3).state ||
                             id(bare_conductive_e4).state ||
                             id(bare_conductive_e5).state ||
                             id(bare_conductive_e6).state ||
                             id(bare_conductive_e7).state ||
                             id(bare_conductive_e8).state ||
                             id(bare_conductive_e9).state ||
                             id(bare_conductive_e10).state ||
                             id(bare_conductive_e11).state;

            id(bare_conductive_any_touch).publish_state(any_active);
